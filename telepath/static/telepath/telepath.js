var t={d:(i,n)=>{for(var r in n)t.o(n,r)&&!t.o(i,r)&&Object.defineProperty(i,r,{enumerable:!0,get:n[r]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)},i={};t.d(i,{A:()=>n});const n=class{constructor(){this.constructors={}}register(t,i){this.constructors[t]=i}unpack(t){const i={};return this.scanForIds(t,i),this.unpackWithRefs(t,i,{})}scanForIds(t,i){if(null===t||"object"!=typeof t)return;if(Array.isArray(t))return void t.forEach((t=>this.scanForIds(t,i)));let n=!1;if("_id"in t&&(n=!0,i[t._id]=t),("_type"in t||"_val"in t||"_ref"in t)&&(n=!0),"_list"in t&&(n=!0,t._list.forEach(function(t){this.scanForIds(t,i)}.bind(this))),"_args"in t&&(n=!0,t._args.forEach(function(t){this.scanForIds(t,i)}.bind(this))),"_dict"in t){n=!0;for(const[n,r]of Object.entries(t._dict))this.scanForIds(r,i)}if(!n)for(const[n,r]of Object.entries(t))this.scanForIds(r,i)}unpackWithRefs(t,i,n){if(null===t||"object"!=typeof t)return t;if(Array.isArray(t))return t.map((t=>this.unpackWithRefs(t,i,n)));let r;if("_ref"in t)r=t._ref in n?n[t._ref]:this.unpackWithRefs(i[t._ref],i,n);else if("_val"in t)r=t._val;else if("_list"in t)r=t._list.map(function(t){return this.unpackWithRefs(t,i,n)}.bind(this));else if("_dict"in t){r={};for(const[s,e]of Object.entries(t._dict))r[s]=this.unpackWithRefs(e,i,n)}else{if(!("_type"in t)){if("_id"in t)throw new Error("telepath encountered object with _id but no type specified");r={};for(const[s,e]of Object.entries(t))r[s]=this.unpackWithRefs(e,i,n);return r}{const s=t._type;if(!(s in this.constructors))throw new Error("telepath unpack found unknown constructor id: "+s);r=new(0,this.constructors[s])(...t._args.map(function(t){return this.unpackWithRefs(t,i,n)}.bind(this)))}}return"_id"in t&&(n[t._id]=r),r}};var r=i.A;export{r as default};