!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Telepath=e():t.Telepath=e()}(this,(()=>(()=>{"use strict";var t={d:(e,i)=>{for(var n in i)t.o(i,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:i[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{default:()=>i});const i=class{constructor(){this.constructors={}}register(t,e){this.constructors[t]=e}unpack(t){const e={};return this.scanForIds(t,e),this.unpackWithRefs(t,e,{})}scanForIds(t,e){if(null===t||"object"!=typeof t)return;if(Array.isArray(t))return void t.forEach((t=>this.scanForIds(t,e)));let i=!1;if("_id"in t&&(i=!0,e[t._id]=t),("_type"in t||"_val"in t||"_ref"in t)&&(i=!0),"_list"in t&&(i=!0,t._list.forEach(function(t){this.scanForIds(t,e)}.bind(this))),"_args"in t&&(i=!0,t._args.forEach(function(t){this.scanForIds(t,e)}.bind(this))),"_dict"in t){i=!0;for(const[i,n]of Object.entries(t._dict))this.scanForIds(n,e)}if(!i)for(const[i,n]of Object.entries(t))this.scanForIds(n,e)}unpackWithRefs(t,e,i){if(null===t||"object"!=typeof t)return t;if(Array.isArray(t))return t.map((t=>this.unpackWithRefs(t,e,i)));let n;if("_ref"in t)n=t._ref in i?i[t._ref]:this.unpackWithRefs(e[t._ref],e,i);else if("_val"in t)n=t._val;else if("_list"in t)n=t._list.map(function(t){return this.unpackWithRefs(t,e,i)}.bind(this));else if("_dict"in t){n={};for(const[r,s]of Object.entries(t._dict))n[r]=this.unpackWithRefs(s,e,i)}else{if(!("_type"in t)){if("_id"in t)throw new Error("telepath encountered object with _id but no type specified");n={};for(const[r,s]of Object.entries(t))n[r]=this.unpackWithRefs(s,e,i);return n}{const r=t._type;if(!(r in this.constructors))throw new Error("telepath unpack found unknown constructor id: "+r);n=new(0,this.constructors[r])(...t._args.map(function(t){return this.unpackWithRefs(t,e,i)}.bind(this)))}}return"_id"in t&&(i[t._id]=n),n}};return e.default})()));